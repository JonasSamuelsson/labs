@using _20201005_AzureDevOpsWorkItemVisualizer

@inject AzureDevOpsClient AzureDevOpsClient
@inject AzureDevOpsClientOptions AzureDevOpsClientOptions
@inject GraphGenerator GraphGenerator
@inject IJSRuntime Javascript

<div>
   <div style="position: fixed; top: 10px; left: 10px;">
      <div style="background-color: #e5e5e5; border-radius: 5px; padding: 5px;">
         <div><span>Organization</span></div>
         <div><input @bind="AzureDevOpsClientOptions.Organization" type="text" /></div>
         <div><span>Project</span></div>
         <div><input @bind="AzureDevOpsClientOptions.Project" type="text" /></div>
         <div><span>PAT</span></div>
         <div><input @bind="AzureDevOpsClientOptions.PersonalAccessToken" type="password" /></div>
         <div><span>Work item ids</span></div>
         <div><input @bind="_ids" type="text" /></div>
         <div>
            <button hidden="@(_loading)" @onclick="Load">Load</button>
            <span hidden="@(!_loading)">Loading...</span>
         </div>
      </div>
   </div>
   <div id="graph"></div>
</div>


@code {

   private string _ids;
   private bool _loading;

   private string _graph;
   private ElementReference _viz;

   private ISet<int> ParseIds()
   {
      return _ids
         .Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries)
         .Select(int.Parse)
         .ToHashSet();
   }

   private async Task Load()
   {
      try
      {
         _loading = true;

         var data = await AzureDevOpsClient.LoadData(ParseIds());
         var graph = GraphGenerator.GenerateGraph(data);

         Console.WriteLine(graph);

         await Javascript.InvokeVoidAsync("updateGraph", graph);
      }
      catch (Exception exception)
      {
         await Javascript.InvokeVoidAsync("alert", exception.ToString());
      }
      finally
      {
         _loading = false;
      }
   }

}
